#include "m_treeviewl.h"

Treemodel::Treemodel()
{
   connect(this,SIGNAL(QStandardItemModel::itemChanged(QStandardItem)), this ,SLOT(treeItemChanged(QStandardItem)));
}
void Treemodel::initmodel(){
        this = new QStandardItemModel(ui->treeView);
        model->setHorizontalHeaderLabels(QStringList()<<QStringLiteral("项目名")<<QStringLiteral("信息"));
        QStandardItem* itemProject = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_Project")],QStringLiteral("项目"));
        model->appendRow(itemProject);
        model->setItem(model->indexFromItem(itemProject).row(),1,new QStandardItem(QStringLiteral("项目信息说明")));
        QStandardItem* itemFolder = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_folder")],QStringLiteral("文件夹1"));
        itemProject->appendRow(itemFolder);
        itemProject->setChild(itemFolder->index().row(),1,new QStandardItem(QStringLiteral("信息说明")));
        itemFolder = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_folder")],QStringLiteral("文件夹2"));
        itemProject->appendRow(itemFolder);
        for(int i=0;i<5;++i){
            QStandardItem* itemgroup = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_group")],QStringLiteral("组%1").arg(i+1));
            itemFolder->appendRow(itemgroup);
            for(int j=0;j<(i+1);++j){
                QStandardItem* itemchannel = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_channel")],QStringLiteral("频道%1").arg(j+1));
                itemgroup->appendRow(itemchannel);
                itemgroup->setChild(itemchannel->index().row(),1,new QStandardItem(QStringLiteral("频道%1信息说明").arg(j+1)));
            }
        }
        itemProject->setChild(itemFolder->index().row(),1,new QStandardItem(QStringLiteral("文件夹2信息说明")));
        itemProject = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_Project")],QStringLiteral("项目2"));
        model->appendRow(itemProject);
        for(int i =0;i<3;++i)
        {
            itemFolder = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_folder")],QStringLiteral("项目2文件夹%1").arg(i+1));
            itemFolder->setCheckable(true);
            itemFolder->setTristate(true);
            QStandardItem* itemFolderDes = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_group")],QStringLiteral("文件夹%1组").arg(i+1));
            itemProject->appendRow(itemFolder);
            itemProject->setChild(itemFolder->index().row(),1,itemFolderDes);
            for(int j=0;j<i+1;++j)
            {
                 QStandardItem* item = new QStandardItem(m_publicIconMap[QStringLiteral("treeItem_dataItem")],QStringLiteral("项目%1").arg(j+1));
                 item->setCheckable(true);
                 itemFolder->appendRow(item);
     
            }
        }
        //关联项目属性改变的信号和槽
        //connect(model,&QStandardItemModel::itemChanged,this,&Widget::treeItemChanged);
        //connect(model,SIGNAL(itemChanged(QStandardItem*)),this,SLOT(treeItemChanged(QStandardItem*)));
        //ui->treeView->setModel(model);
}
void Treemodel::treeItemChanged(QStandardItem * item){
    if ( item == nullptr )
    return ;
    if ( item->isCheckable())
    {
    //如果条目是存在复选框的，那么就进行下面的操作
        Qt::CheckState state = item->checkState (); //获取当前的选择状态
        if(item->isTristate()){
        //如果条目是三态的，说明可以对子目录进行全选和全不选的设置
            if ( state != Qt::PartiallyChecked ){
            //当前是选中状态，需要对其子项目进行全选
                treeItem_checkAllChild (item , state == Qt::Checked ? true : false );
            }
          }
        else
        {
            treeItem_CheckChildChanged ( item );
        }
    }
}
void Treemodel::treeItem_checkAllChild(QStandardItem * item, bool check)
{
    if(item == nullptr)return;
    int rowCount = item->rowCount();
    for(int i=0;i<rowCount;++i)
    {
        QStandardItem* childItems = item->child(i);
        treeItem_checkAllChild_recursion(childItems,check);
    }
    if(item->isCheckable())
        item->setCheckState(check ? Qt::Checked : Qt::Unchecked);
}

void Treemodel::treeItem_checkAllChild_recursion(QStandardItem * item,bool check)
{
    if(item == nullptr)
        return;
    int rowCount = item->rowCount();
    for(int i=0;i<rowCount;++i)
    {
        QStandardItem* childItems = item->child(i);
        treeItem_checkAllChild_recursion(childItems,check);
    }
    if(item->isCheckable())
        item->setCheckState(check ? Qt::Checked : Qt::Unchecked);
}
void Treemodel::treeItem_CheckChildChanged(QStandardItem * item){
    if(nullptr == item)
        return;
    Qt::CheckState siblingState = checkSibling(item);
    QStandardItem * parentItem = item->parent();
    if(nullptr == parentItem)
        return;
    if(Qt::PartiallyChecked == siblingState)
    {
        if(parentItem->isCheckable() && parentItem->isTristate())
            parentItem->setCheckState(Qt::PartiallyChecked);
    }
    else if(Qt::Checked == siblingState)
    {
        if(parentItem->isCheckable())
            parentItem->setCheckState(Qt::Checked);
    }
    else
    {
        if(parentItem->isCheckable())
            parentItem->setCheckState(Qt::Unchecked);
    }
    treeItem_CheckChildChanged(parentItem);
}
/// \brief 测量兄弟节点的情况，如果都选中返回Qt::Checked，都不选中Qt::Unchecked,不完全选中返回Qt::PartiallyChecked

/// \param item

/// \return 如果都选中返回Qt::Checked，都不选中Qt::Unchecked,不完全选中返回Qt::PartiallyChecked

///

Qt::CheckState Treemodel::checkSibling(QStandardItem * item)
{
    //先通过父节点获取兄弟节点

    QStandardItem * parent = item->parent();
    if(nullptr == parent)
        return item->checkState();
    int brotherCount = parent->rowCount();
    int checkedCount(0),unCheckedCount(0);
    Qt::CheckState state;
    for(int i=0;i<brotherCount;++i){
        QStandardItem* siblingItem = parent->child(i);
        state = siblingItem->checkState();
        if(Qt::PartiallyChecked == state)
            return Qt::PartiallyChecked;
        else if(Qt::Unchecked == state)
            ++unCheckedCount;
        else
            ++checkedCount;
        if(checkedCount>0 && unCheckedCount>0)
            return Qt::PartiallyChecked;
    }
    if(unCheckedCount>0)
        return Qt::Unchecked;
    return Qt::Checked;
}

//bool Treemodel::setData(const QModelIndex &index, const QVariant &value, int role)
//{
//      if (role==Qt::CheckStateRole && index.column()==0)
//      {
//            TreeItem *item = static_cast<TreeItem*>(index.internalPointer());
//            if (value==Qt::Unchecked)
//            {
//                  //m_checkedList.removeOne(index);
//                  item->setCheckState(false);
//                  emit(dataChanged(index, index));
//            }
//            else if(value==Qt::Checked)
//            {
//                  //m_checkedList.append(index);
//                  item->setCheckState(true);
//                  emit(dataChanged(index, index));
//            }
//            int childCount = rowCount(index);
//            if (childCount > 0)
//            {
//                  //判断是否有子节点
//                  for (int i=0; i<childCount; i++)
//                  {
//                        //获得子节点的index
//                        QModelIndex child = this->index(i, 0, index);
//                        //递归，改变子节点的checkbox状态
//                        setData(child, value, Qt::CheckStateRole);
//                  }
//            }
//      }

//      return true;
//}
//QVariant Treemodel::data(const QModelIndex &index, int role) const
//{
//    if (!index.isValid())
//        return QVariant();

//      TreeItem *item = static_cast<TreeItem*>(index.internalPointer());

//      //判断显示的对象是checkbox，并且位于第一列
//      if (role==Qt::CheckStateRole && index.column()==0)
//            return static_cast<int>( item->isChecked() ? Qt::Checked : Qt::Unchecked );

//    if (role != Qt::DisplayRole)
//        return QVariant();

//    return item->data(index.column());
//}

//Qt::ItemFlags Treemodel::flags(const QModelIndex &index) const
{
    if (!index.isValid())
        return 0;

      if (index.column()==0)   //如果是第一列的结点，则使其有显示checkbox的能力
            return Qt::ItemIsEnabled | Qt::ItemIsSelectable | Qt::ItemIsUserCheckable;

    return Qt::ItemIsEnabled | Qt::ItemIsSelectable;
}
